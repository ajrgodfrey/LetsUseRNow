 
%\setcounter{chapter}{} 
\chapter{LURN\ldots{} To Examine Data Numerically} 
\label{NumericalEDA} 
 
<<setup, include=FALSE>>= 
opts_chunk$set(fig.path='figures/Numerical', comment=NA, dev=c('pdf','postscript','svg'), prompt=T, out.width="0.7\\textwidth") 
source("GenericSettings.R") 
@ 
 
In this chapter we see how to obtain and present simple numerical summaries suitable for describing data. The same data set used in Chapter~\ref{SimpleGraphs} on creating graphs is used again. 
 
\section{Obtaining basic numerical summaries of data} 
 
The \Rcmd{summary} command is a very useful tool. It behaves differently for \R{} objects depending on the nature of the object it is working on. The air quality data we used for Chapter~\ref{SimpleGraphs} for demonstrating basic graphing techniques is a \Rclass{data.frame} object as evidenced by asking \R{} what class the object is using the \Rcmd{class} command 
<<CheckData>>= 
class(airquality) 
@ 
 
Applying the \Rcmd{summary} command to the \Robject{air quality} data gives: 
<<SummaryDF>>= 
summary(airquality) 
@ 
The \Rcmd{summary} command finds the common numeric summary statistics for the continuous-valued variables and does a particulary useless job on the variables for month and day. Well it's not really \R{}'s fault. The month didn't need to be stored numerically, but in any case we got what we asked for! It's not \R{}'s fault we asked to be told what the minimum day number was! 
 
Notice that the \Rcmd{summary} command extracted the minimum, maximum, median and mean for the variables in the \Rclass{data.frame}. These are all available using corresponding \Rcmd{min}, \Rcmd{max}, \Rcmd{median}, and \Rcmd{mean} commands separately but they work in different ways on data frames. For example we might have thought to use the \Rcmd{mean} command on a \Rclass{data.frame}, but it is better practice to use the more specific \Rcmd{colMeans} command instead. 
<<MeansDF>>= 
colMeans(airquality[,1:4]) 
colMeans(airquality[,1:4], na.rm=TRUE) 
mean(airquality[,1], na.rm=TRUE) 
@ 
Note that I've told \R{} which columns of the \Robject{air quality} \Rclass{data.frame} to work with using the appropriate subscripting code. I've also needed to tell \R{} to ignore the missing data for the two variables \Robject{Ozone} and \Robject{Solar.R} using the \Rarg{na.rm=TRUE}. The output for the \Rcmd{summary} command did tell us how many values for each variable were missing. Recall that missing values are represented by a ``\code{NA}". 
 
The \Rcmd{min} and \Rcmd{max} commands all work on the data by assuming we want the statistic for the whole list of numbers over all columns. For example 
<<BasicStats>>= 
#median(airquality[,1:4], na.rm=TRUE) 
min(airquality[,1:4], na.rm=TRUE) 
max(airquality[,1:4], na.rm=TRUE) 
@ 
 
It used to be possible to ask \R{} to use the \Rcmd{median}, in a command like this, but as of version 2-14-0, an error message was returned instead of an answer. 
 
We will need to see how to get the relevant medians, minima, and maxima for the columns separately later in this chapter, but for now let's see how the relevant summary measures can be obtained for a single column of the \Robject{air quality} data. The \Rcmd{attach} command allows us direct access to the variables by name. 
<<SummaryVector>>= 
attach(airquality) 
min(Temp) 
max(Wind) 
median(Solar.R) 
median(Solar.R, na.rm=TRUE) 
@ 
Notice that a consequence of missing values in our data is that some functions will return the \code{NA} value. If we want the quantity returned to be estimated using the available data we simply add the argument \Rarg{na.rm=TRUE} which removes the values denoted with the \code{NA}. 
 
The first and third quartiles are not so easily extracted however. We can get the first and third quartiles from the five number summary by extracting elements of the output returned by the \Rcmd{fivenum} command. For example 
<<Quartiles>>= 
fivenum(Ozone) 
@ 
There are some minor differences between the methods used by the \Rcmd{summary} and \Rcmd{fivenum} commands for the first and third quartiles. See the relevant help page using \code{?fivenum} for an explanation. 
 
Knowing how these commands work on simple sets of numbers is very useful for the more elegant presentations in the following sections. 
 
\section{Obtaining slightly more elegant summaries} 
 
When preparing reports it is unlikely that we would want a single statistic all that often. Rather, we are usually interested in exposing patterns or differences within the data. We do this graphically but we may need to extract the exact quantities plotted in the graph as well. 
 
The \Rcmd{tapply} command is very useful for creating tables of results. It has three arguments; the main variable of interest, the grouping variable(s), and the function we want performed on each group within the data. It is of course, easier to show how the \Rcmd{tapply} command works in action so we'll use the air quality data again. 
 
Let's say we want to know the \Rcmd{mean} Wind speed over the five months data were collected. 
<<TApply1>>= 
tapply(Wind, Month, mean) 
@ 
This does the job very nicely. We could ask for other quantities such as the minimum, maximum, or standard deviation within each month by referring to the relevant \R{} command in the third argument. 
 
If we had multiple response variables of interest, we would need to repeat the command for each one. If we had more than one way of asking for the grouping though, the \Rcmd{tapply} command is very useful indeed. The air quality data doesn't have a second factor we can use for this illustration, so I've created a second variable which asks if the day of the month is in the second half of the month. See what happens. 
<<TApply2>>= 
tapply(Wind, list(Month, Day>15), mean) 
@ 
 
If we wanted more than one statistic of interest, we would need to repeat the command and change the function being referenced in the third argument. We can use the \Rcmd{summary} command here though as it gives us more quantities. 
<<TApply3>>= 
tapply(Wind, Month, summary) 
@ 
 
This printout isn't particularly attractive, but it is quick and informative. If presentation was more important than getting results efficiently, we would look to improve the appearance --- this means more difficult coding though. 
 
There is one more feature of the \Rcmd{tapply} command that must be pointed out. The simple commands shown thus far use the default settings of the relevant functions. In particular, the \Rcmd{mean} command does not ignore missing values by default. 
<<TApply4>>= 
tapply(Ozone, Month, mean) 
@ 
We now know that there are missing \Robject{Ozone} observations in each month. We can add a fourth argument to the command which will be passed on to the function mentioned in the third argument. 
<<TApply5>>= 
tapply(Ozone, Month, mean, na.rm=TRUE) 
@ 
gives us the means of the observed data. 
 
\section{Getting things printed how we want them} 
 
We will often need to watch the way \R{} chooses to print out results. When a direct reference to data is sought, the order of the data is maintained. In our example using the \Rcmd{tapply} command above, the months were numeric values. The order was probably the most logical one as it was in chronological order. 
 
If we had a long list of results and it was the extremes we wanted to focus attention towards, the \Rcmd{sort} and \Rcmd{rev} commands would be most useful. For example, say we want to order the monthly average wind speeds found above in ascending order, then we would use 
<<SortedTApply>>= 
sort(tapply(Wind, Month, mean)) 
@ 
So we now know that August has the smallest average wind speed and that May is the windiest month. 
 
To get the data listed in reverse chronological order we would use: 
<<SortedTApply2>>= 
rev(tapply(Wind, Month, mean)) 
@ 
and we can combine both commands to get the months ordered from windiest to least windy using: 
<<SortedTApply3>>= 
rev(sort(tapply(Wind, Month, mean))) 
@ 
 
\section{Correlation structure within a data set} 
\label{CorrelationStructure} 
 
The summaries given thus far in this chapter all refer to variables as single objects. Often we have multivariate data and want to know more about it. Looking for inter-relationships among variables can be achieved using correlation coefficients; this gives us a numerical equivalent to the scatter plot matrices shown in Section~\ref{ScatterPlotMatrices}. 
 
In fact, the commands used here resemble those used to generate the scatter plot matrix. I like to do this to save effort. My ability to copy and paste is better than my typing! 
<<Correlations>>= 
cor(data.frame(Ozone, Solar.R, Wind, Temp)) 
@ 
Having said this, it is now obvious that the missing values in some variables is causing grief. An additional argument is required. 
<<Correlations2>>= 
cor(data.frame(Ozone, Solar.R, Wind, Temp),  
use = "pairwise.complete.obs") 
@ 
Often, \R{} will allow arguments to be abbreviated. Unfortunately, this isn't the case for this additional argument. It is the case for choosing the preferred correlation measure to be found though. The default is to calculate Pearson's correlation coefficient. My personal preference is to use both this measure and Spearman's rank correlation coefficient as it does not require the relationship to be linear, nor does it require the samples to be normally distributed. As well as finding Spearman's measure, I've decided that printing correlations to five decimal places is unnecessary so have restricted the output using the \Rcmd{round} command. 
<<Correlations4>>= 
round(cor(data.frame(Ozone, Solar.R, Wind, Temp),  
use = "pairwise.complete.obs", method = "s"), 3) 
@ 
 
 
 
 
\section{Use of dplyr for data summarisation} 
\label{DPlyRDataSummarisation} 
 
 
In Section~\ref{DPlyRDataManipulation}, we saw how the \Rpkg{dplyr} package offers an alternative to base \R{} functionality for manipulating data. We now see that this package offers commands for summarising data. In particular, the commands: \Rcmd{group\_by}, \Rcmd{summarise}, and \Rcmd{count}. 
   
You'll need to install the package (see Section~\ref{InstallPackages} for instructions) before running the function 
<<loadDPlyR>>= 
library(dplyr) 
@ 
to gain access to the commands just listed. We will also make use of the \Rpkg{dplyr} data structure called a \Rclass{tbl\_df} instead of the common \Rclass{data.frame} using: 
<<tblAirQuality>>= 
airquality2=tbl_df(airquality) 
@  
 
 
The \Rcmd{summarise}  and \Rcmd{group\_by} commands can be used instead of the \Rcmd{tapply} command introduced earlier in this chapter. To get the overall average wind speed from the \Robject{airquality} data, we could use: 
<<WindAverage>>= 
airquality %>% summarise(mean(Wind, na.rm = TRUE)) 
@   
which is more long-winded than just using the \Rcmd{mean} command alone. The value of \Rcmd{summarise} becomes more evident when we seek the means for groups within our data, such as: 
<<WindSpeedByMonth>>= 
airquality%>% group_by(Month) %>% summarise(mean(Wind, na.rm = TRUE)) 
@ 
 
We could use other functions seen in this chapter for alternative summary statistics within these functions. A common task is to check on how much data we have for each group of interest. We could use \Rcmd{summarise} and \Rcmd{length} to count up the data, but the \Rpkg{dplyr} package gives us the \Rcmd{count} function to make this even more efficient. 
<<CountMonths>>= 
airquality%>% count(Month) 
@ 
 
 
As an illustration of the real power of the \stressind{pipe operator}, say we wanted to show the hottest months by their average temperature within the air quality data. One way to do this using commands from the \Rpkg{dplyr} package is to: 
<<FindHottestMonths>>= 
Grouped = group_by(airquality, Month) 
Summarised = summarise(Grouped, AveTemp=mean(Temp, na.rm = TRUE)) 
arrange(Summarised, desc(AveTemp)) 
@ 
Which has stored data at each step. Note in particular that a new variable was created by name in the \Rcmd{summarise} command; this helps in the subsequent \Rcmd{arrange} step. We might want to store the results at each step, but if we didn't want to, then we could use piping like this: 
<<FindHottestMonthsPiping>>= 
airquality2 %>% 
group_by(Month) %>% 
summarise(AveTemp = mean(Temp, na.rm = TRUE))  %>% 
arrange(desc(AveTemp)) 
@ 
 
Note that commands that might be nested on one line in the standard way of combining commands can be split out onto multiple lines to make it even easier to see what has been managed by each command. This leaves room for comments to be added at the end of lines to help anyone else read the code being written. 
 
 
\section{Closing} 
 
If you are carrying on working with \R{} you might wish to remove direct access to the data sets we used in this chapter by issuing the following commands 
<<DropData>>= 
detach(airquality) 
@ 
<<cleanup, include=FALSE>>=
rm(list = ls())
@
